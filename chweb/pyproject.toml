[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "abssent"
version = "0.1.0"
description = "Zero-Budget Aspect-Based Sentiment & Novelty-Shock Return Forecasting Pipeline"
authors = ["Research Team <research@abssent.ai>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/abssent/abssent"
repository = "https://github.com/abssent/abssent"
documentation = "https://abssent.readthedocs.io"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business :: Financial :: Investment",
]

[tool.poetry.dependencies]
python = "^3.10"
pandas = "^2.0.0"
polars = "^0.20.0"
numpy = "^1.24.0"
scikit-learn = "^1.3.0"
statsmodels = "^0.14.0"
scipy = "^1.10.0"
torch = "^2.0.0"
transformers = "^4.30.0"
sentence-transformers = "^2.2.0"
beautifulsoup4 = "^4.12.0"
requests = "^2.31.0"
aiohttp = "^3.8.0"
asyncio = "^3.4.3"
yfinance = "^0.2.18"
duckdb = "^0.9.0"
pyarrow = "^12.0.0"
fastapi = "^0.100.0"
uvicorn = "^0.22.0"
prefect = "^2.10.0"
rich = "^13.4.0"
typer = "^0.9.0"
langdetect = "^1.0.9"
boilerpy3 = "^1.0.7"
linearmodels = "^5.0"
vectorbt = "^0.25.0"
mlflow = {version = "^2.5.0", optional = true}
streamlit = {version = "^1.25.0", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"
ruff = "^0.0.280"
black = "^23.7.0"
mypy = "^1.5.0"
pre-commit = "^3.3.0"
bandit = "^1.7.5"
interrogate = "^1.5.0"
hypothesis = "^6.82.0"
mkdocs = "^1.5.0"
mkdocs-material = "^9.1.0"
mkdocstrings = {extras = ["python"], version = "^0.22.0"}
jupyter = "^1.0.0"
notebook = "^7.0.0"

[tool.poetry.extras]
ml = ["mlflow"]
web = ["streamlit"]
all = ["mlflow", "streamlit"]

[tool.poetry.scripts]
abssent = "abssent.cli:app"

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=abssent",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["abssent"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 